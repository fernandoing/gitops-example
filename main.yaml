Parameters:
  InstanceType:
    Description: Instance to deploy into ASG
    Type: String
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    Default: t2.micro
  ToPort:
    Description: LB SG FROM port to open
    Type: Number
  FromPort:
    Description: LB SG TO port to open
    Type: Number
  LBSecurityGroupIngressIp:
    Description: Ingress rule for load balancer.
    Type: String
    Default: 0.0.0.0/0
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: AWS VPC to deploy ASG into
  AvailZones:
    Description: Availability zones for ASG and LB
    Type: List<AWS::EC2::AvailabilityZone::Name>
  VPCSubnets:
    Type: AWS::EC2::Subnet::Id
    Description: VPC subnets to deploy LB into (must match AvailZones)

Mappings:
  RegionMap:
    us-east-1:
      Ub22Ami: "ami-053b0d53c279acc90"
    us-west-1:
      Ub22Ami: "ami-0f8e81a3da6e2510a"
    us-east-2:
      Ub22Ami: "ami-024e6efaf93d85776"
    us-west-2:
      Ub22Ami: "ami-03f65b8614a860c29"
    ap-southeast-1:
      Ub22Ami: "ami-0df7a207adb9748c7"
    ap-northeast-1:
      Ub22Ami: "ami-0d52744d6551d851e"

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/sdh
          Ebs:
            DeleteOnTermination: True
            Encrypted: False
            VolumeSize: 10
            VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt
            - IamInstanceProfile
            - Arn
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Ub22Ami]
        InstanceType: !Ref InstanceType
        SecurityGroups:
        - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: |
              #!/bin/bash

              apt update
              apt install apache2 -y
              systemctl start apache2
              systemctl enable apache2
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to host from load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupName: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref FromPort
          ToPort: !Ref ToPort
          CidrIp: !Ref LBSecurityGroupIngressIp
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join [ -, [ !Sub "${AWS::StackName}", instance, profile ] ]
      Path: "/"
      Roles:
      - !Ref SSMRole
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref AvailZones
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref MyTargetGroup
  SSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - "AmazonSSMManagedInstanceCore"
  Ec2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: [!Ref VPCSubnets]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: Ec2LoadBalancer
      Port: 80
      Protocol: HTTP
      TargetType: instance
      IpAddressType: ipv4
      VpcId: !Ref VpcId
  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn:
        Ref: Ec2LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: MyTargetGroup
