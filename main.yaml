Parameters:
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: String
  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    Default: t2.micro
Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${AWS::StackName}-launch-template"
      LaunchTemplateData:
        #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-blockdevicemappings 
        BlockDeviceMappings:
          #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html
        - DeviceName: /dev/sdh
          Ebs:
            #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html
            DeleteOnTermination: True
            Encrypted: False
            VolumeSize: 10
            VolumeType: gp3
        IamInstanceProfile: 
          Arn: !GetAtt
            - IamInstanceProfile
            - Arn
        ImageId: ami-053b0d53c279acc90
        InstanceType: t2.micro
        SecurityGroups: 
        - !Ref InstanceSecurityGroup
        UserData: 
          Fn::Base64: 
            !Sub |
              #!/bin/bash

              apt update
              apt install apache2 -y
              systemctl start apache2
              systemctl enable apache2
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join [ -, [ !Sub "${AWS::StackName}", instance, profile ] ]
      Path: "/"
      Roles:
      - !Ref RootRole
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        - us-east-1a
        - us-east-1b
        - us-east-1c
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref MyTargetGroup
  
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"
  Ec2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - subnet-002cddcf93df96ad5
        - subnet-053a9d7e1a79917e5
        - subnet-0cb06205677416c25
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: Ec2LoadBalancer
      Port: 80
      Protocol: HTTP
      TargetType: instance
      IpAddressType: ipv4
      VpcId: vpc-010d73da829d30c24

  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn:
        Ref: Ec2LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: MyTargetGroup
